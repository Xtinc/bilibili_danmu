cmake_minimum_required(VERSION 3.0.0)
project(danmu VERSION 0.1.0)

set(CMAKE_CXX_STANDARD 17)
cmake_policy(SET CMP0074 NEW)

#include(CTest)
#enable_testing()
#########################################
#Configure boost
#set(Boost_DEBUG ON)
set(Boost_NO_WARN_NEW_VERSIONS ON)
set(BOOST_ROOT C:/boost_1_78_0)
set(Boost_USE_STATIC_LIBS ON)
message(STATUS "------------------------------------------------")
message(STATUS "-- Boost Configure")
find_package(Boost COMPONENTS context coroutine program_options REQUIRED)
if(Boost_FOUND)
    message(STATUS "-- Boost version:${Boost_VERSION_STRING}")
    message(STATUS "-- Include Directories")
    foreach(include_dir ${Boost_INCLUDE_DIRS})
        message(STATUS "    " ${include_dir})
    endforeach()
    message (STATUS "-- Library Directories")
	foreach (library_dir ${Boost_LIBRARY_DIRS})
		message (STATUS "    " ${library_dir})
	endforeach ()
    message(STATUS "--Libraries")
    foreach(libsfound ${Boost_LIBRARIES})
        message(STATUS "    " ${libsfound})
    endforeach()
else()
    message(FATAL_ERROR "Failed to find required dependency: boost")
endif()
###########################################
message(STATUS "------------------------------------------------")
message(STATUS "-- OpenSSL Configure")
set(OPENSSL_ROOT_DIR C:/openssl-1.1.1l)
find_package(OpenSSL 1.1.0 REQUIRED)
if(OPENSSL_FOUND)
    message(STATUS "-- OpenSSL version: ${OPENSSL_VERSION}")
    message(STATUS "-- Include Directory")
    message(STATUS "    " ${OPENSSL_INCLUDE_DIR})
    message(STATUS "-- Libraries")
    message(STATUS "    " ${OPENSSL_CRYPTO_LIBRARY})
    message(STATUS "    " ${OPENSSL_SSL_LIBRARY})
else()
	message (FATAL_ERROR "Failed to find required dependency: OpenSSL")
endif()
#############################################
message(STATUS "------------------------------------------------")
message(STATUS "-- ZLIB Configure")
set(ZLIB_ROOT "C:/zlib-1.2.11")
find_package(ZLIB)
if(ZLIB_FOUND)
    message(STATUS "-- ZLIB version: ${ZLIB_VERSION_STRING}")
    message(STATUS "-- Include Directories")
    foreach(include_dir ${ZLIB_INCLUDE_DIRS})
        message(STATUS "    " ${include_dir})
    endforeach()
    message(STATUS "-- Libraries")
    foreach(library_dir ${ZLIB_LIBRARIES})
        message(STATUS "    " ${library_dir})
    endforeach()
else()
message(FATAL_ERROR "Failed to find required dependency: ZLIB")
endif()
#############################################
message(STATUS "------------------------------------------------")
message(STATUS "-- SQLite3 Configure")
set(SQLite3_ROOT "C:/Users/xtc/Downloads/SQLite3")
find_package(SQLite3)
if(SQLite3_FOUND)
    message(STATUS "-- SQLite3 version: ${SQLite3_VERSION}")
    message(STATUS "-- Include Directories")
    foreach(include_dir ${SQLite3_INCLUDE_DIRS})
        message(STATUS "    " ${include_dir})
    endforeach()
    message(STATUS "-- Libraries")
    foreach(library_dir ${SQLite3_LIBRARIES})
        message(STATUS "    " ${library_dir})
    endforeach()
else()
message(FATAL_ERROR "Failed to find required dependency: SQLite3")
endif()
message(STATUS "------------------------------------------------")
############################################
add_executable(danmu main.cpp netapps.cpp Countdanmu.cpp)
target_compile_definitions(${PROJECT_NAME} PRIVATE -D_WIN32_WINNT=0x0601 -D_CRT_SECURE_NO_WARNINGS)
target_compile_options(${PROJECT_NAME} PRIVATE /bigobj)
target_link_options(${PROJECT_NAME} PRIVATE /NODEFAULTLIB:MSVCRT)
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES} SQLite::SQLite3 OpenSSL::SSL OpenSSL::Crypto Boost::boost ZLIB::ZLIB)
###########################################
message(STATUS "-- Compile Definitions")
get_target_property(compile_defs ${PROJECT_NAME} COMPILE_DEFINITIONS)
foreach(def ${compile_defs})
    message(STATUS "    " ${def})
endforeach()
message(STATUS "-- Compile Options")
get_target_property(com_opt ${PROJECT_NAME} COMPILE_OPTIONS)
foreach(def2 ${com_opt})
    message(STATUS "    " ${def2})
endforeach()
message(STATUS "------------------------------------------------")
